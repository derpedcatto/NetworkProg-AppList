﻿Протокол НТТР
HTTP (HyperText Transfer Protocol) - протокол передачи гипертекста
Текстовый прикладной протокол (основа - символ)
Запрос (Request):		 // В запросе можно выделить три части:
						 // 
POST /home HTTP1/1		 // 1) первая строка: МЕТОД  URL  Протокол
Host: site.com			 // 2) Заголовки: пары ключ-значение, разделенные
Connection: Close		 //    ": ". Конец блока заголовков - 
						 // пустая строка   
x=10&y=2				 // 3) тело запроса - произвольные данные (параметры,
						 //     HTML, JSON,...)

Ответ (Respone)

HTTP1/1  200  Ok					 // 200 - HTTP Response code
Connection: close					 // 
Content-Type: application/json		 // Headers
									 // 
{"command":"Start", "data":"123"}	 // Body

URI - Uniform Resource Identificator - унифицированный идентификатор ресурса - 
некая запись, однозначно определяющая (идентифицирующая) информационный ресурс:
книгу (библиографическая ссылка), носитель (компакт-диск), сетевой ресурс (файл
на Гугл-диске, блог на сайте)

URL - ... Locator - ссылка, переход по которой переведет на ресурс.

API - Application-Program Interface - специальные ресурсы, содержимое которых
представляет данные без HTML обработки. Обычно это JSON или XML контент

Обработка данных из API
 JSON - Разбор данных требует описания классов-моделей, отвечающих за структуру
   данных на API:
    [] - массив или коллекция
	{} - объект
	:  - вместо =
	все имена полей и значения нужно брать в "" (только двойные)
   Первоначально смотрим на ответ сервера, анализируем его состав
    [                                       // начало массива
      {                                     // начало объекта
        "r030": 36,                         //  поле "r030" - число (int)
        "txt": "Австралійський долар",      //       "txt"  - строка
        "rate": 24.9416,                    //       "rate" - число (float/double)
        "cc": "AUD",                        //       "cc"   - строка
        "exchangedate": "05.12.2022"        //       "exchangedate" - строка
      },                                    // 
      {                                     // Такой же объект
        "r030": 124,                        // 
        "txt": "Канадський долар",          // 
        "rate": 27.2321,                    // 
        "cc": "CAD",                        // 
        "exchangedate": "05.12.2022"        // 
      },... ]                               // конец массива

  XML:
   Отличается от JSON структурой данных
<?xml version="1.0" encoding="utf-8"?>         // строка формата, остальное - DocumentElement
<exchange>                                     // Различий между объектами и коллекциями нет
  <currency>                                   // каждый из элементов может содержать
    <r030>36</r030>                            // дочерние элементы (nodes):
    <txt>Австралійський долар</txt>            //  <exchange> - содержит в себе 
    <rate>24.9416</rate>                       //    несколько (коллекцию) <currency>
    <cc>AUD</cc>                               //  <currency> - содержит в себе
    <exchangedate>05.12.2022</exchangedate>    //    ограниченные поля <r030>, <txt>, ...
  </currency>                                  //  границы объекта задают теги
  <currency>                                   //  <currency> --- </currency>
    <r030>124</r030>                           //
    <txt>Канадський долар</txt>                // Принципиальное отличие от JSON в том,  
    <rate>27.2321</rate>                       //  что объект кроме данных может иметь
    <cc>CAD</cc>                               //  атрибуты 
    <exchangedate>05.12.2022</exchangedate>    //   <currency r030="123"> ... </currency>
  </currency>                                  //
  ....
  Основу при работе с XML составляют селекторы - поиск/отбор элементов по
  какому-либо признаку.